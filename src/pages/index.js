import Head from 'next/head'
import {Col, Row, Stack} from "react-bootstrap";
import React from "react";
import Container from "react-bootstrap/Container";
import useUpdates from "../modules/hooks/useUpdates";
import useGoal from "../modules/hooks/useGoal";
import formatter from "../modules/utils/numberFormatter";
import {Bar, Line} from "react-chartjs-2";
function InfoCard ({title,children,subtitle}) {
    return(
        <div className={"info-card"}>
            <div>{title}</div>
            <div className={"info"}>
                {children}
            </div>
            <small>{subtitle}</small>
        </div>
    )
}
function BigInfoCard ({title,children,subtitle}) {
    return(
        <div className={"big info-card"}>
            <div>{title}</div>
            <div className={"info"}>
                {children}
            </div>
            <small>{subtitle}</small>
        </div>
    )
}

export default function Home() {
    const weekData = useUpdates("/api/views/weeklyView");
    //const dailyData = useUpdates("/api/views/dailyView",{date:new Date()});
    const goal = useGoal();
    // data
    if (weekData.length === 0) return <div className={"text-center"}>Loading...</div>
  return (
    <>
      <Head>
        <title>Surtrics</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Container>
            <Row>
                <Col sm={2} className={"gap-2"}>
                    <InfoCard title={"Total Increments"}>
                        {formatter(weekData.map(({count}) => +count).reduce((a,b)=>a+b,0))}
                    </InfoCard>
                    <InfoCard title={"Daily Average"}>
                        {formatter(Math.round(weekData.map(({count}) => +count).reduce((a,b)=>a+b,0)/weekData.length || 0))}
                    </InfoCard>
                </Col>
                <Col sm={2}>
                    <InfoCard title={"Daily Goal"}>
                        {formatter(goal)}
                    </InfoCard>
                    <InfoCard title={"Weekly Goal"}>
                        {formatter(goal * 5)}
                    </InfoCard>
                </Col>
                <Col sm={2}>
                    <InfoCard title={"Daily Difference"} subtitle={"daily goal"}>
                        { weekData.at(-1).count - goal }
                    </InfoCard>
                    <InfoCard title={"Week Difference"}>
                        {formatter(weekData.map(({count}) => +count).reduce((a,b)=>a+b,0) - (goal * weekData.length))}
                    </InfoCard>
                </Col>
                <Col sm={2}>
                    <InfoCard title={"Total Difference"} subtitle={"excluding today"}>
                        {formatter(weekData.map(({count}) => +count).reduce((a,b)=>a+b,0) - (goal * weekData.length) - (weekData.at(-1).count - goal))}
                    </InfoCard>
                    <InfoCard title={"Hourly Average"}>
                        {formatter(Math.round(weekData.map(({count}) => +count).reduce((a,b)=>a+b,0)/weekData.length/7 || 0))}
                    </InfoCard>
                </Col>
                <Col sm={4}>
                    <BigInfoCard title={"Expected Total"} subtitle={"By end of day"}>
                        {formatter(goal * (weekData.length))}
                    </BigInfoCard>
                </Col>
            </Row>
            <Row>
                <Col sm={4}>
                    <div
                        className={"graph-card text-center"}
                        style={{
                            border: "1px solid #000",
                            fontSize: "1.5rem",
                        }}
                    >
                        <p>Weekly Snapshot</p>
                        <Bar
                            data={{
                                labels: weekData.map(({date}) => new Date(date).toISOString().split("T")[0]),
                                datasets:[
                                    {
                                        data:weekData.map(({count}) => +count),
                                        borderColor: 'rgb(54, 162, 235)',
                                        backgroundColor: 'rgba(54, 162, 235)',
                                    }
                                ]
                            }}
                            options={{
                                plugins: {
                                    legend: {
                                        display: false,
                                    },
                                    datalabels: {
                                        color: "#FFF",
                                    },
                                },
                                scales: {
                                    y:{
                                        display: false,
                                        ticks: {
                                            color: "#FFF"
                                        }
                                    },
                                    x: {
                                        display: false
                                    }
                                },
                            }}
                            height={190}
                        />
                    </div>
                </Col>
                <Col sm={4}>
                    <BigInfoCard title={"Expected Total"} subtitle={"By end of day"}>
                        {formatter(goal * (weekData.length))}
                    </BigInfoCard>
                </Col>
            </Row>
        </Container>
    </>
  )
}

